### 类定义

###### 当前类

* 你可以在类定义中放入任何代码
* 类和模块也是对象（不断重复~）
* 不管处在Ruby程序的哪个位置，总是存在一个当前对象**self**；类似地，也总是有一个当前类（模块）存在。
* 在类定义中，当前对象self就是正在定义的类
* 在类定义中，当前类就是self，即正在定义的类
* Ruby解释器总是追踪当前类（或模块）的引用。所有使用**def**定义的方法都成为当前类的实例方法。
* 如果有一个类的引用，则可以用`class_eval()`（或`module_eval()`）方法来打开这个类
* 在顶级作用域定义方法时，当前对象是**main**，所以self不是类，这时当前类的角色由main的类**Object**来充当，所以**这个方法会成为Object类的实例方法**。
* **类实例变量仅仅可以被类本身访问**，不能被类的实例对象或子类访。
* 变量(@@val)可以被子类或类的实例使用。因为类变量并不属于真正的类，它们属于类体系结构。
* 避免使用类变量，尽量使用类实例变量
